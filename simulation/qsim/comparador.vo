// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "02/03/2023 13:34:46"

// 
// Device: Altera EP4CE6E22A7 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module MaiorQueOK (
	SAIDA,
	MA,
	MB);
output 	SAIDA;
input 	[4:0] MA;
input 	[4:0] MB;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \SAIDA~output_o ;
wire \MB[4]~input_o ;
wire \MA[4]~input_o ;
wire \MA[3]~input_o ;
wire \MB[3]~input_o ;
wire \MA[2]~input_o ;
wire \MB[2]~input_o ;
wire \MA[1]~input_o ;
wire \MA[0]~input_o ;
wire \MB[0]~input_o ;
wire \MB[1]~input_o ;
wire \inst3~0_combout ;
wire \inst3~1_combout ;
wire \inst3~2_combout ;
wire \inst3~3_combout ;


cycloneive_io_obuf \SAIDA~output (
	.i(\inst3~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\SAIDA~output_o ),
	.obar());
// synopsys translate_off
defparam \SAIDA~output .bus_hold = "false";
defparam \SAIDA~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \MB[4]~input (
	.i(MB[4]),
	.ibar(gnd),
	.o(\MB[4]~input_o ));
// synopsys translate_off
defparam \MB[4]~input .bus_hold = "false";
defparam \MB[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MA[4]~input (
	.i(MA[4]),
	.ibar(gnd),
	.o(\MA[4]~input_o ));
// synopsys translate_off
defparam \MA[4]~input .bus_hold = "false";
defparam \MA[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MA[3]~input (
	.i(MA[3]),
	.ibar(gnd),
	.o(\MA[3]~input_o ));
// synopsys translate_off
defparam \MA[3]~input .bus_hold = "false";
defparam \MA[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MB[3]~input (
	.i(MB[3]),
	.ibar(gnd),
	.o(\MB[3]~input_o ));
// synopsys translate_off
defparam \MB[3]~input .bus_hold = "false";
defparam \MB[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MA[2]~input (
	.i(MA[2]),
	.ibar(gnd),
	.o(\MA[2]~input_o ));
// synopsys translate_off
defparam \MA[2]~input .bus_hold = "false";
defparam \MA[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MB[2]~input (
	.i(MB[2]),
	.ibar(gnd),
	.o(\MB[2]~input_o ));
// synopsys translate_off
defparam \MB[2]~input .bus_hold = "false";
defparam \MB[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MA[1]~input (
	.i(MA[1]),
	.ibar(gnd),
	.o(\MA[1]~input_o ));
// synopsys translate_off
defparam \MA[1]~input .bus_hold = "false";
defparam \MA[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MA[0]~input (
	.i(MA[0]),
	.ibar(gnd),
	.o(\MA[0]~input_o ));
// synopsys translate_off
defparam \MA[0]~input .bus_hold = "false";
defparam \MA[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MB[0]~input (
	.i(MB[0]),
	.ibar(gnd),
	.o(\MB[0]~input_o ));
// synopsys translate_off
defparam \MB[0]~input .bus_hold = "false";
defparam \MB[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \MB[1]~input (
	.i(MB[1]),
	.ibar(gnd),
	.o(\MB[1]~input_o ));
// synopsys translate_off
defparam \MB[1]~input .bus_hold = "false";
defparam \MB[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst3~0 (
// Equation(s):
// \inst3~0_combout  = (\MA[1]~input_o  & (((\MA[0]~input_o  & !\MB[0]~input_o )) # (!\MB[1]~input_o ))) # (!\MA[1]~input_o  & (\MA[0]~input_o  & (!\MB[0]~input_o  & !\MB[1]~input_o )))

	.dataa(\MA[1]~input_o ),
	.datab(\MA[0]~input_o ),
	.datac(\MB[0]~input_o ),
	.datad(\MB[1]~input_o ),
	.cin(gnd),
	.combout(\inst3~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst3~0 .lut_mask = 16'h08AE;
defparam \inst3~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst3~1 (
// Equation(s):
// \inst3~1_combout  = (\MA[2]~input_o  & ((\inst3~0_combout ) # (!\MB[2]~input_o ))) # (!\MA[2]~input_o  & (!\MB[2]~input_o  & \inst3~0_combout ))

	.dataa(\MA[2]~input_o ),
	.datab(\MB[2]~input_o ),
	.datac(\inst3~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst3~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst3~1 .lut_mask = 16'hB2B2;
defparam \inst3~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst3~2 (
// Equation(s):
// \inst3~2_combout  = (\MA[3]~input_o  & ((\inst3~1_combout ) # (!\MB[3]~input_o ))) # (!\MA[3]~input_o  & (!\MB[3]~input_o  & \inst3~1_combout ))

	.dataa(\MA[3]~input_o ),
	.datab(\MB[3]~input_o ),
	.datac(\inst3~1_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst3~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst3~2 .lut_mask = 16'hB2B2;
defparam \inst3~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst3~3 (
// Equation(s):
// \inst3~3_combout  = (\MB[4]~input_o  & ((\inst3~2_combout ) # (!\MA[4]~input_o ))) # (!\MB[4]~input_o  & (!\MA[4]~input_o  & \inst3~2_combout ))

	.dataa(\MB[4]~input_o ),
	.datab(\MA[4]~input_o ),
	.datac(\inst3~2_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst3~3_combout ),
	.cout());
// synopsys translate_off
defparam \inst3~3 .lut_mask = 16'hB2B2;
defparam \inst3~3 .sum_lutc_input = "datac";
// synopsys translate_on

assign SAIDA = \SAIDA~output_o ;

endmodule
